00. Start -> programa
0.	Programa ->   bloque_declaracion bloque       	 
1.	Programa -> bloque		
2.	bloque_declaracion ->  bloque_declaracion declaracion 
3.	bloque_declaracion ->  declaracion 
4.	declaración ->  DIM OP_MENOR lista_var OP_MAYOR AS OP_MENOR lista_tipos OP_MAYOR 
5.	lista_var ->   lista_var COMA ID 
6.	lista_var ->  ID  		
7.	lista_tipos ->  lista_tipos COMA tipo_dato 
8.	lista_tipos -> tipo_dato 	
9.	tipo_dato  ->  INTEGER  
10.	tipo_dato  ->  FLOAT   
11.	tipo_dato  ->  STRING      
12.	bloque ->  bloque sentencia 
13.	bloque ->  sentencia 	{Bp = Sp}
14.	sentencia ->   ciclo	{Bp = Cp}
15.	sentencia ->   if 		{Sp = IFp}
16.	sentencia ->  asignación   {Sp = Ap}                   
17.	sentencia ->   salida  	{Sp = SALp}                 
18.	sentencia ->   entrada 	{Sp = ENTp}                    
19.	ciclo ->	WHILE P_A decision P_C LL_A bloque LL_C 
20.	asignacion -> ID OP_ASIG expresion P_Y_C 
21.	if ->IF P_A decision P_C LL_A bloque LL_C      
22.	if ->IF P_A decision P_C LL_A bloque LL_C ELSE LL_A bloque LL_C 
23.	decisión -> decision OP_LOGICO condicion
24.	decisión -> condicion   {Dp = CONDp}
25.	condición -> OP_NEGACION condicion
26.	condición -> expresion comparador expresion  
27.	comparador ->  OP_IGUAL                 {COMPp = crear_hoja(OP_IGUAL)}       
28.	comparador ->  OP_DISTINTO            {COMPp = crear_hoja(OP_DISTINTO)}           
29.	comparador ->  OP_MENORIGUAL     {COMPp = crear_hoja(OP_MENORIGUAL)}           
30.	comparador ->  OP_MAYORIGUAL   {COMPp = crear_hoja(OP_MAYORIGUAL)}                  
31.	comparador ->  OP_MAYOR      {COMPp = crear_hoja(OP_MAYOR)}                
32.	comparador ->  OP_MENOR 		 {COMPp = crear_hoja(OP_MENOR)}       	
33.	expresión ->  expresion OP_SUMA termino  {Ep = (OP_SUMA,Ep,Tp)}
34.	expresión ->  expresion OP_REST termino 	 {Ep = (OP_REST,Ep,Tp)}
35.	expresión ->  termino    {Ep = Tp}
36.	termino ->  termino OP_MULT factor    {Tp = crear_nodo(OP_MULT,Tp,Fp)}  
37.	termino ->  termino OP_DIVI factor       {Tp = crear_nodo(OP_DIVI,Tp,Fp)}
38.	termino ->  factor  	{Tp = Fp}
39.	factor -> P_A expresion P_C           
40.	factor -> maximo               {Fp = MAXp}
41.	factor -> ID		{Fp = crear_hoja(ID)}
42.	factor -> CTE_STRING    	{Fp = crear_hoja(CTE_STRING)}
43.	factor -> CTE_INT  	{Fp = crear_hoja(CTE_INT)}
44.	factor -> CTE_REAL 	{Fp = crear_hoja(CTE_REAL)}
45.	factor -> CTE_BIN  	{Fp = crear_hoja(CTE_BIN)}             
46.	factor -> CTE_HEXA 	{Fp = crear_hoja(CTE_HEXA)}
47.	máximo ->   MAXIMO P_A lista_expresion P_C 
48.	lista_expresion ->  lista_expresion COMA expresion 
49.	lista_expresion ->   expresion     {LEp = Ep}
50.	salida -> PUT CTE_STRING P_Y_C
51.	salida -> PUT ID P_Y_C       
52.	entrada ->   GET ID P_Y_C


Reglas de PRUEBA.TXT:
6 5 5 5 9 8 10 7 10 7 10 7 4 3 50 17 13 50 17 12 52 18 12 43 38 35 20 16 12 44 38 35 46 38 33 20 16 12 41 38 35 29 43 38 35 26 24 41 38 35 43 38 33 20 16 13 41 38 44 37 35 39 38 35 41 38 41 38 41 36 35 49 43 38 35 48 41 38 35 48 43 38 35 49 41 38 35 48 45 38 35 48 47 40 38 35 48 47 40 36 35 39 38 33 20 16 12 41 38 35 41 38 33 20 16 12 19 14 12 50 17 12 41 38 35 31 45 38 35 26 24 50 17 13 41 38 35 32 45 38 35 26 24 50 17 13 21 15 13 22 15 12 0 00
